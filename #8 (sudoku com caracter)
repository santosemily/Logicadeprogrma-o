#include <stdio.h>
#define TAM 9
/* para zerar o digito */
void digito (int * dig) {
  int i;
  for (i = 0; i < TAM; i++){
    dig[i] = 0;}
}
/* para validar */
int validar (char k[TAM][TAM], int x, int * dig) {
  int i, j;
  for (i = 0; i < TAM; i++) {
    for (j = 0; j < TAM; j++) {
      if (x) {
        dig[k[i][j]-96]++;
        if (dig[k[i][j]-96] > 1){
          return 1;}
      }
      else {
        dig[k[j][i]-96]++;
        if (dig[k[j][i]-96] > 1){
          return 1;}
      }
    }
  digito(dig);
  }
    return 0;
}

int validamatriz (char k[TAM][TAM], int num1, int final, int num2, int final2, int * dig) {
  int i, j;
  for (i = num1; i < final; i++) {
    for (j = num2; j < final2; j++) {
      dig[k[j][i]-96]++;
      if (dig[k[j][i]-96] > 1){
        return 1;}
    }
  }
  digito(dig);
    return 0;
}

int main() {
  int n, inv, num[TAM], casos, i, j;
  char k[TAM][TAM];

  scanf("%d", &n);

    int results[n];

  for (casos = 1; casos <= n; casos++) {
    for (i = 0; i < TAM; i++) {
      digito(num);
      for (j = 0; j < TAM; j++) {
        scanf(" %c", &k[i][j]);
        k[i][j]--;
      }
    }
    inv = validar(k, 1, num) + validar(k, 0, num);
    for (i = 0; i < TAM; i += 3){
      for (j = 0; j < TAM; j += 3) {
        inv += validamatriz(k, i, i + 3, j, j + 3, num);
      }
    }
    if (inv){
        results[casos - 1] = 0;}
    else{
        results[casos - 1] = 1;}
  }

  for(i = 0; i < n; i++) {
      printf("Instancia %i\n", i + 1);
      if(results[i] == 0) {
          printf("NAO\n\n");
      }
      else {
          printf("SIM\n\n");
      }
  }
    return 0;
}
